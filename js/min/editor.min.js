function init() {
    map = new google.maps.Map(document.getElementById("map-holder"), {
        center: {
            lat: 38.904077,
            lng: -77.0648104
        },
        zoom: 15
    }), map.data.setControls(["Point", "LineString", "Polygon"]), map.data.setStyle({
        editable: !0,
        draggable: !0
    }), bindDataLayerListeners(map.data), dropContainer = document.getElementById("drop-container"), panel = document.getElementById("panel");
    var e = document.getElementById("map-holder");
    geoJsonInput = document.getElementById("geojson-input"), downloadLink = document.getElementById("download-link"), resizeGeoJsonInput(), [e, dropContainer].forEach(function(e) {
        google.maps.event.addDomListener(e, "drop", handleDrop), google.maps.event.addDomListener(e, "dragover", showPanel)
    }), google.maps.event.addDomListener(e, "dragstart", showPanel), google.maps.event.addDomListener(e, "dragenter", showPanel), google.maps.event.addDomListener(dropContainer, "dragend", hidePanel), google.maps.event.addDomListener(dropContainer, "dragleave", hidePanel), google.maps.event.addDomListener(geoJsonInput, "input", refreshDataFromGeoJson), google.maps.event.addDomListener(geoJsonInput, "input", refreshDownloadLinkFromGeoJson), google.maps.event.addDomListener(window, "resize", resizeGeoJsonInput)
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
}

function refreshGeoJsonFromData() {
    map.data.toGeoJson(function(e) {
        geoJsonInput.value = JSON.stringify(e, null, 2), refreshDownloadLinkFromGeoJson()
    })
}

function refreshDataFromGeoJson() {
    var e = new google.maps.Data({
        map: map,
        style: map.data.getStyle(),
        controls: ["Point", "LineString", "Polygon"]
    });
    try {
        var n = JSON.parse(geoJsonInput.value);
        e.addGeoJson(n)
    } catch (n) {
        return e.setMap(null), void setGeoJsonValidity("" !== geoJsonInput.value ? !1 : !0)
    }
    map.data.setMap(null), map.data = e, bindDataLayerListeners(e), setGeoJsonValidity(!0)
}

function refreshDownloadLinkFromGeoJson() {
    downloadLink.href = "data:;base64," + btoa(geoJsonInput.value)
}

function bindDataLayerListeners(e) {
    e.addListener("addfeature", refreshGeoJsonFromData), e.addListener("removefeature", refreshGeoJsonFromData), e.addListener("setgeometry", refreshGeoJsonFromData)
}

function setGeoJsonValidity(e) {
    e ? geoJsonInput.className = "" : geoJsonInput.className = "invalid"
}

function showPanel(e) {
    return e.stopPropagation(), e.preventDefault(), dropContainer.className = "visible", !1
}

function hidePanel() {
    dropContainer.className = ""
}

function handleDrop(e) {
    e.preventDefault(), e.stopPropagation(), hidePanel();
    var n = e.dataTransfer.files;
    if (n.length)
        for (var o, a = 0; o = n[a]; a++) {
            var t = new FileReader;
            t.onload = function(e) {
                map.data.addGeoJson(JSON.parse(e.target.result))
            }, t.onerror = function(e) {
                console.error("reading failed")
            }, t.readAsText(o)
        } else {
            var r = e.dataTransfer.getData("text/plain");
            r && map.data.addGeoJson(JSON.parse(r))
        }
    return !1
}

function resizeGeoJsonInput() {
    var e = geoJsonInput.getBoundingClientRect(),
        n = panel.getBoundingClientRect();
    geoJsonInput.style.height = n.bottom - e.top - 8 + "px"
}

function toggle_visibility(e) {
    var n = document.getElementById(e);
    "block" == n.style.display ? n.style.display = "none" : n.style.display = "block"
}

function changeWidth(e) {
    var n = document.getElementById(e);
    "64.9%" == n.style.width ? n.style.width = "100%" : n.style.width = "64.9%"
}

function resizeMap(e) {
    google.maps.event.trigger(e, "resize"), mapResized = !0
}

function panelToggle() {
    toggle_visibility("panel"), changeWidth("map-container"), resizeMap(map)
}
var map, dropContainer, panel, geoJsonInput, downloadLink;
google.maps.event.addDomListener(window, "load", init);
var mapResized = !1;
window.onbeforeunload = function() {
    return "Are you sure you want to leave?"
};
