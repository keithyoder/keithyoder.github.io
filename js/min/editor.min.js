function init() {
    map = new google.maps.Map(document.getElementById("map-holder"), {
        center: {
            lat: 38.904077,
            lng: -77.0648104,
        },
        zoom: 16
        }), 
        map.data.setControls(["Polygon"]),
        map.data.setStyle({
            editable: true,
            draggable: true
        }), 
        bindDataLayerListeners(map.data)
        panel = document.getElementById("panel");
    var e = document.getElementById("map-holder");
    geoJsonInput = document.getElementById("geojson-input");
    google.maps.event.addDomListener(window, "resize", resizeGeoJsonInput)
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.RIGHT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
}

function refreshGeoJsonFromData() {
    map.data.toGeoJson(function(e) {
        geoJsonInput.value = JSON.stringify(e.features[0].geometry.coordinates)
    })
}

function bindDataLayerListeners(e) {
    e.addListener("addfeature", refreshGeoJsonFromData), e.addListener("removefeature", refreshGeoJsonFromData), e.addListener("setgeometry", refreshGeoJsonFromData)
}

function resizeGeoJsonInput() {
    var e = geoJsonInput.getBoundingClientRect(),
        n = panel.getBoundingClientRect();
    geoJsonInput.style.height = n.bottom - e.top - 8 + "px"
}

var map, dropContainer, panel, geoJsonInput, downloadLink;
google.maps.event.addDomListener(window, "load", init);
var mapResized = !1;
//window.onbeforeunload = function() {
//    return "Are you sure you want to leave?"
//};
